/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
Copyright (C) 2019 Sensia Software LLC. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.api.datastore;

import java.util.Collection;


/**
 * <p>
 * Interface for the main historical observation registry on a sensor hub.
 * </p><p>
 * This registry keeps track of which databases contain data for the
 * different procedures available on the hub. Since the registry also 
 * implements the database interface (read-only), it allows clients to query
 * all observations available from a single place.
 * </p>
 *
 * @author Alex Robin
 * @date Sep 18, 2019
 */
public interface IObsDatabaseRegistry extends IHistoricalObsDatabase
{

    /**
     * Sets the database that should be queried when no other
     * @param db
     *
    void setDefaultDatabase(IHistoricalObsDatabase db);*/
    
    
    /**
     * Registers a procedure to database mapping.
     * <p>This can be called multiple times to register multiple mappings with the
     * same database instance. However, several databases cannot contain data for
     * the same procedure so a given procedure UID cannot be mapped to different
     * database instances using this method.</p>
     * <p>Note that the database is not required to contain data for the specified
     * procedure at the time of the call.</p>
     * @param procedureUIDs Unique IDs of procedures to associate with the database
     * @param db A database instance
     */
    void register(Collection<String> procedureUIDs, IHistoricalObsDatabase db);
    
    
    /**
     * Unregisters procedure to database mapping.
     * @param procedureUIDs Unique IDs of procedures previously associated with 
     * the specified database
     * @param db A database instance
     */
    void unregister(Collection<String> procedureUIDs, IHistoricalObsDatabase db);
    
    
    /**
     * Provides direct (potentially read/write) access to the database that is
     * currently handling data from the specified procedure
     * @param procedureUID Unique ID of the procedure
     * @return The database instance or null if none has been registered
     * for the specified procedure
     */
    IHistoricalObsDatabase getDatabase(String procedureUID);
    
    
    /**
     * Convert from a local DB entry ID to the public ID
     * @param databaseID ID of database as registered in this registry
     * @param dbLocalID Internal ID of database entry
     * @return The public ID exposed by the registry
     */
    long getPublicID(int databaseID, long dbLocalID);
    
    
    /**
     * Convert from a public registry ID to a local DB entry ID
     * @param databaseID ID of database as registered in this registry
     * @param publicID Public ID of entry
     * @return The entry ID used internally by the database
     */
    long getLocalID(int databaseID, long publicID);
    
    
    /**
     * Checks if a database is currently handling data generated by the
     * specified procedure
     * @param procedureUID Unique ID of the procedure
     * @return true if a database has been registered, false otherwise
     */
    boolean hasDatabase(String procedureUID);
}
